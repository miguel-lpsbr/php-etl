<?php

namespace Oliverde8\Component\PhpEtl\Tests;

use Oliverde8\Component\PhpEtl\Builder\Factories\Loader\CsvFileWriterFactory;
use Oliverde8\Component\PhpEtl\ChainBuilder;
use Oliverde8\Component\PhpEtl\Exception\UnknownOperationException;
use Oliverde8\Component\PhpEtl\ExecutionContextFactory;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class ChainBuilderTest extends TestCase
{
    private MockObject $mockFactory1;
    private MockObject $mockFactory2;
    private ChainBuilder $chainBuilder;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->mockFactory1 = $this->getMockBuilder(CsvFileWriterFactory::class)->disableOriginalConstructor()->getMock();
        $this->mockFactory1
            ->expects($this->any())->method("supports")
            ->willReturnCallback(function (string $operation, array $options) {
                return $operation == 'op1';
            });
        $this->mockFactory2 = $this->getMockBuilder(CsvFileWriterFactory::class)->disableOriginalConstructor()->getMock();
        $this->mockFactory2->expects($this->any())->method("supports")
            ->willReturnCallback(function (string $operation, array $options) {
                return $operation == 'op2';
            });

        $this->chainBuilder = new ChainBuilder(new ExecutionContextFactory());
        $this->chainBuilder->registerFactory($this->mockFactory1, 'op1');
        $this->chainBuilder->registerFactory($this->mockFactory2, 'op2');
    }


    public function testSimpleBuild()
    {
        $this->mockFactory1->expects($this->once())->method("getOperation")->with("op1", []);
        $this->mockFactory2->expects($this->once())->method("getOperation")->with("op2", ["test"]);

        $this->chainBuilder->buildChainProcessor(
            [
                ['operation' => 'op1', 'options' => []],
                ['operation' => 'op2', 'options' => ["test"]],
            ]
        );
    }

    public function testBuildWihMultipleSameOperation()
    {
        $this->mockFactory1->expects($this->exactly(2))
            ->method("getOperation")
            ->withConsecutive(["op1", []], ['op1', ['test2']]);
        $this->mockFactory2->expects($this->once())->method("getOperation")->with("op2", ["test"]);

        $this->chainBuilder->buildChainProcessor(
            [
                ['operation' => 'op1', 'options' => []],
                ['operation' => 'op2', 'options' => ["test"]],
                ['operation' => 'op1', 'options' => ["test2"]],
            ]
        );
    }

    public function testWithVariableOptions()
    {
        $this->mockFactory1->expects($this->once())->method("getOperation")->with("op1", ['variable']);
        $this->mockFactory2->expects($this->once())->method("getOperation")->with("op2", ["test"]);

        $this->chainBuilder->buildChainProcessor(
            [
                ['operation' => 'op1', 'options' => ["!myValue['sub']"]],
                ['operation' => 'op2', 'options' => ["test"]],
            ],
            ['myValue' => ['sub' => 'variable']]
        );
    }

    public function testUnknownOperation()
    {
        $this->expectException(UnknownOperationException::class);
        $this->chainBuilder->buildChainProcessor(
            [
                ['operation' => 'op5', 'options' => []],
                ['operation' => 'op2', 'options' => ["test"]],
            ]
        );
    }
}